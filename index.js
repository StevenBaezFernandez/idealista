const fs = require('fs');
const https = require('https');
const http = require('http');
const url = require('url');
const nodemailer = require('nodemailer');
const { google } = require('googleapis');
require('dotenv').config();

console.log("google credentials: ", process.env.GOOGLE_CREDENTIALS_PATH)

const PORT = 3000;
const API_ENDPOINT = '/extract';

// API keys configuration
const apiKeys = [
  '308ff234ebmsh26b37ab29b3e8abp1c8d0djsne4f46bd4c064',
  'bb9f6eb5c4msh9d3b47786cd371fp13d6e4jsnb9a0c458d1bb',
  '761eba8edcmsheec2c20dc3cffc5p18b22fjsn0254fa46a1fd',
];

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID; // From .env
const SHEET_NAME = 'Properties'; // Your sheet name
const EMAIL_CONFIG = {
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASSWORD
  }
};

const stateFilePath = './apikey_index.json';

// Load last used API key index
function loadLastUsedIndex() {
  try {
    return JSON.parse(fs.readFileSync(stateFilePath)).lastIndex || 0;
  } catch (err) {
    return 0;
  }
}

// Save current API key index
function saveLastUsedIndex(index) {
  fs.writeFileSync(stateFilePath, JSON.stringify({ lastIndex: index }));
}

// Rotate API keys
function getNextApiKey() {
  const lastIndex = loadLastUsedIndex();
  const nextIndex = (lastIndex + 1) % apiKeys.length;
  saveLastUsedIndex(nextIndex);
  return apiKeys[nextIndex];
}


async function initGoogleSheets() {
  const auth = new google.auth.GoogleAuth({
    credentials: {
      client_email: process.env.GOOGLE_CLIENT_EMAIL,
      client_id: process.env.GOOGLE_CLIENT_ID,
      private_key: process.env.GOOGLE_PRIVATE_KEY?.replace(/\\n/g, '\n'),
      project_id: process.env.GOOGLE_PROJECT_ID,
    },
    scopes: ['https://www.googleapis.com/auth/spreadsheets'], // or full access
  });

  const authClient = await auth.getClient();

  const sheets = google.sheets({ version: 'v4', auth: authClient });

  const spreadsheet = await sheets.spreadsheets.get({
    spreadsheetId: '13cZUgpWK5zDleUb8Ywy78MaQASP9NPyKyAJqAmHoYbQ',
  });

  console.log('Sheets:', spreadsheet.data.sheets.map(s => s.properties.title));

  return sheets;
}

// Append data to Google Sheet
async function saveToGoogleSheets(sheets, data) {
  try {
    // Map data to spreadsheet columns
    const rowData = [
      data.assetType || '',
      data.title || '',
      'Active',
      data.address || '',
      data.district || '',
      data.city || '',
      data.url || '',
      data.floor || '',
      data.size || '',
      data.rooms || '',
      data.bathrooms || '',
      data.yearBuilt || '',
      data.agency || '',
      data.publicationDate || '',
      data.price || '',
      data.counterofferPrice || '',
      data.pricePerSqm || '',
      data.estimatedSalePrice || '',
      data.expectedProfitability || ''
    ];
    

    const response = await sheets.spreadsheets.values.append({
      spreadsheetId: SPREADSHEET_ID,
      range: `Properties!A:W`,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      resource: {
        values: [rowData]
      }
    });

    console.log(`‚úÖ Data saved to Google Sheets: ${response.data.updates.updatedCells} cells updated`);
    return response;
  } catch (err) {
    console.error('‚ùå Google Sheets API error:', err);
    throw err;
  }
}

// Send email with analysis results
async function sendAnalysisEmail(recipientEmail, analysisResult) {
  const transporter = nodemailer.createTransport(EMAIL_CONFIG);
  
  const mailOptions = {
    from: EMAIL_CONFIG.auth.user,
    to: recipientEmail,
    subject: 'üè† Property Investment Analysis Report',
    html: `
      <h1>Property Investment Analysis</h1>
      <div style="background-color:#f0f9ff; padding:20px; border-radius:10px;">
        <pre style="white-space:pre-wrap; font-family:monospace;">${analysisResult}</pre>
      </div>
      <p>This report was generated by our real estate investment analysis system.</p>
    `
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log(`üìß Email sent to: ${recipientEmail}`);
    return info;
  } catch (error) {
    console.error('‚ùå Email sending failed:', error);
    throw error;
  }
}

// Extract numbers from DeepSeek response
function extractFinancialData(analysisText) {
  const result = {
    counterofferPrice: null,
    pricePerSqm: null,
    estimatedSalePrice: null,
    expectedProfitability: null
  };

  // Extract counteroffer price
  const counterofferMatch = analysisText.match(/Precio de contraoferta:\s*([\d,.]+)/i);
  if (counterofferMatch) {
    result.counterofferPrice = parseFloat(counterofferMatch[1].replace('.', '').replace(',', '.'));
  }

  // Extract price per m¬≤
  const pricePerSqmMatch = analysisText.match(/Precio\/m2:\s*([\d,.]+)/i);
  if (pricePerSqmMatch) {
    result.pricePerSqm = parseFloat(pricePerSqmMatch[1].replace('.', '').replace(',', '.'));
  }

  // Extract estimated sale price
  const salePriceMatch = analysisText.match(/Precio estimado de venta:\s*([\d,.]+)/i);
  if (salePriceMatch) {
    result.estimatedSalePrice = parseFloat(salePriceMatch[1].replace('.', '').replace(',', '.'));
  }

  // Extract expected profitability
  const profitabilityMatch = analysisText.match(/Rentabilidad esperada:\s*([\d,.]+)%/i);
  if (profitabilityMatch) {
    result.expectedProfitability = parseFloat(profitabilityMatch[1].replace(',', '.'));
  }

  return result;
}

// Analyze property data with DeepSeek API
async function analyzeWithDeepSeek(sheets, propertyData, recipientEmail) {
  const ANALYSIS_PROMPT = `
Eres experto en an√°lisis de rentabilidades financieras para operaciones de activos inmobiliarios. Quiero que en base a la informaci√≥n adjunta:

‚Ä¢ Ubicaci√≥n: ${propertyData.address || 'No disponible'}
‚Ä¢ Dimensiones: ${propertyData.size ? propertyData.size + ' m¬≤' : 'No disponible'}
‚Ä¢ Precio: ${propertyData.price ? propertyData.price + ' ‚Ç¨' : 'No disponible'}
‚Ä¢ Habitaciones: ${propertyData.rooms || 'No disponible'}
‚Ä¢ A√±o construcci√≥n: ${propertyData.yearBuilt || 'No disponible'}

Analiza la propiedad y proporciona los siguientes valores num√©ricos espec√≠ficos:

1. Precio de contraoferta recomendado (en formato: Precio de contraoferta: [valor])
2. Precio por metro cuadrado (en formato: Precio/m2: [valor])
3. Precio estimado de venta despu√©s de reforma (en formato: Precio estimado de venta: [valor])
4. Rentabilidad esperada en porcentaje (en formato: Rentabilidad esperada: [valor]%)

Adem√°s, incluye un an√°lisis detallado que contenga:

‚Ä¢ Tipo de operaci√≥n recomendada (CRV o CRA)
‚Ä¢ Ubicaci√≥n (Ciudad, distrito y barrio)
‚Ä¢ Resumen de costes (ITP, honorarios, reforma)
‚Ä¢ Rentabilidad neta anual y ROE
‚Ä¢ Estrategia de inversi√≥n recomendada

Datos de la propiedad:
${JSON.stringify(propertyData, null, 2)}

Calcula los valores espec√≠ficos solicitados y proporciona el an√°lisis completo.
  `;

  const options = {
    hostname: 'api.deepseek.com',
    path: '/v1/chat/completions',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(options, async (deepseekRes) => {
      let data = '';
      deepseekRes.on('data', (chunk) => data += chunk);
      
      deepseekRes.on('end', async () => {
        try {
          const response = JSON.parse(data);
          
          if (response.choices && response.choices.length > 0) {
            const analysis = response.choices[0].message.content;
            console.log('‚úÖ Received analysis from DeepSeek');
            
            // Extract financial data from analysis
            const financialData = extractFinancialData(analysis);
            let  style = {
              style: 'currency',
              currency: "EUR"
            };
            const propertyPriceFormatter = new Intl.NumberFormat("es", style)
            
            // Prepare spreadsheet data
            const sheetData = {
              assetType: propertyData.propertyType || 'Piso',
              title: propertyData.suggestedTexts.title || '',
              address: propertyData.ubication.title || '',
              district: propertyData.ubication.administrativeAreaLevel3 || '',
              city: propertyData.ubication.administrativeAreaLevel2 || '',
              url: `https://www.idealista.com/inmueble/${propertyData.propertyId}/`,
              floor: propertyData.floor || '',
              size: propertyData.moreCharacteristics.constructedArea || '',
              rooms: propertyData.moreCharacteristics.roomNumber || propertyData.moreCharacteristics.roomDistributionNumber || '',
              bathrooms: propertyData.moreCharacteristics.bathNumber || '',
              yearBuilt: propertyData.yearBuilt || '',
              agency: propertyData.contactInfo.commercialName || 'Private',
              publicationDate: propertyData.publicationDate || new Date().toISOString().split('T')[0],
              price: propertyPriceFormatter.format(propertyData.price) + propertyData.priceInfo.currencySuffix || '',
              counterofferPrice: financialData.counterofferPrice,
              pricePerSqm: financialData.pricePerSqm,
              estimatedSalePrice: financialData.estimatedSalePrice,
              expectedProfitability: financialData.expectedProfitability
            };

            // Save to Google Sheets
            await saveToGoogleSheets(sheets, sheetData);
            
            // Send analysis via email
            await sendAnalysisEmail(recipientEmail, analysis);
            console.log('üì© Analysis report emailed successfully');
            
            resolve();
          } else {
            throw new Error('Invalid response from DeepSeek API');
          }
        } catch (err) {
          console.error('‚ùå DeepSeek processing error:', err);
          reject(err);
        }
      });
    });

    req.on('error', (err) => {
      console.error('‚ùå DeepSeek API request failed:', err);
      reject(err);
    });

    req.write(JSON.stringify({
      model: "deepseek-chat",
      messages: [
        { role: "system", content: "Eres un experto en an√°lisis de inversiones inmobiliarias especializado en reformas y conversi√≥n a alojamientos tur√≠sticos." },
        { role: "user", content: ANALYSIS_PROMPT }
      ],
      temperature: 0.3,
      max_tokens: 2000
    }));

    req.end();
  });
}

// Fetch property details from Idealista API
function fetchPropertyDetails(sheets, propertyId, recipientEmail) {
  const apiKey = getNextApiKey();
  
  const options = {
    method: 'GET',
    hostname: 'idealista7.p.rapidapi.com',
    path: `/propertydetails?propertyId=${propertyId}&location=es&language=es`,
    headers: {
      'x-rapidapi-key': apiKey,
      'x-rapidapi-host': 'idealista7.p.rapidapi.com'
    }
  };

  const req = https.request(options, (apiRes) => {
    let data = '';
    
    apiRes.on('data', (chunk) => data += chunk);
    
    apiRes.on('end', async () => {
      console.log(`‚úÖ Used API key: ${apiKey}`);
      
      try {
        const propertyData = JSON.parse(data);
        propertyData.propertyId = propertyId; // Add property ID to object
        console.log(`üîç Fetched property detail (${propertyId})`);
        
        // Send to DeepSeek for analysis
        await analyzeWithDeepSeek(sheets, propertyData, recipientEmail);
      } catch (err) {
        console.error('‚ùå JSON parsing failed:', err);
      }
    });
  });

  req.on('error', (err) => {
    console.error(`‚ùå Idealista API Error with key ${apiKey}:`, err.message);
  });

  req.end();
}

debugger

// Main server function
async function main() {
  // Initialize Google Sheets API once
  const sheets = await initGoogleSheets();
  console.log('üîë Authenticated with Google Sheets API');

  // Create HTTP server
  const server = http.createServer((req, res) => {
    const { pathname } = url.parse(req.url, true);
    
    if (req.method === 'POST' && pathname === API_ENDPOINT) {
      let body = '';
      
      req.on('data', chunk => body += chunk);
      
      req.on('end', async () => {
        try {
          const payload = JSON.parse(body);
          
          // Validate request format
          if (!payload || typeof payload.emailBody !== 'string' || !payload.recipientEmail) {
            res.writeHead(400, { 'Content-Type': 'application/json' });
            return res.end(JSON.stringify({ 
              error: 'Invalid request format',
              message: 'Missing emailBody or recipientEmail'
            }));
          }
          
          // Extract property ID
          const regex = /https:\/\/www\.idealista\.com\/inmueble\/(\d+)/;
          const match = payload.emailBody.match(regex);
          
          if (!match || !match[1]) {
            res.writeHead(400, { 'Content-Type': 'application/json' });
            return res.end(JSON.stringify({ 
              error: 'Property ID not found',
              message: 'No valid Idealista URL found in email body'
            }));
          }
          
          const propertyId = match[1];
          console.log(`üîç Extracted property ID: ${propertyId}`);
          
          // Start processing and respond immediately
          res.writeHead(200, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ 
            status: 'processing',
            message: 'Analysis started. Results will be sent to your email and saved to Google Sheets.',
            propertyId,
            spreadsheetId: SPREADSHEET_ID
          }));
          
          // Fetch property details and start analysis pipeline
          fetchPropertyDetails(sheets, propertyId, payload.recipientEmail);
          
        } catch (err) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          res.end(JSON.stringify({ 
            error: 'Invalid JSON format',
            message: err.message
          }));
        }
      });
    } else {
      res.writeHead(404, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ 
        error: 'Not found',
        message: 'Only POST requests to /extract are supported'
      }));
    }
  });

  // Start the server
  server.listen(PORT, () => {
    console.log(`üöÄ Server running at http://localhost:${PORT}`);
    console.log(`üìä Data will be saved to Google Sheets: ${SPREADSHEET_ID}`);
  });
}

// Start the application
main().catch(err => {
  console.error('‚ùå Critical error during startup:', err);
  process.exit(1);
});