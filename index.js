const fs = require('fs');
const https = require('https');
const http = require('http');
const url = require('url');
const nodemailer = require('nodemailer');
require('dotenv').config();

const PORT = 3000;
const API_ENDPOINT = '/extract';

// API keys configuration
const apiKeys = [
  '308ff234ebmsh26b37ab29b3e8abp1c8d0djsne4f46bd4c064',
  'bb9f6eb5c4msh9d3b47786cd371fp13d6e4jsnb9a0c458d1bb',
  '761eba8edcmsheec2c20dc3cffc5p18b22fjsn0254fa46a1fd',
];

const DEEPSEEK_API_KEY = process.env.DEEPSEEK_API_KEY; // Replace with your actual DeepSeek API key
const EMAIL_CONFIG = {
  service: 'gmail', // Change if using different provider
  auth: {
    user: process.env.EMAIL_USER, // Replace with your email
    pass: process.env.EMAIL_PASSWORD // Replace with your email password/app-specific password
  }
};

const stateFilePath = './apikey_index.json';

// Load last used API key index
function loadLastUsedIndex() {
  try {
    return JSON.parse(fs.readFileSync(stateFilePath)).lastIndex || 0;
  } catch (err) {
    return 0;
  }
}

// Save current API key index
function saveLastUsedIndex(index) {
  fs.writeFileSync(stateFilePath, JSON.stringify({ lastIndex: index }));
}

// Rotate API keys
function getNextApiKey() {
  const lastIndex = loadLastUsedIndex();
  const nextIndex = (lastIndex + 1) % apiKeys.length;
  saveLastUsedIndex(nextIndex);
  return apiKeys[nextIndex];
}

// Send email with analysis results
async function sendAnalysisEmail(recipientEmail, analysisResult) {
  const transporter = nodemailer.createTransport(EMAIL_CONFIG);
  
  const mailOptions = {
    from: EMAIL_CONFIG.auth.user,
    to: recipientEmail,
    subject: 'üè† Property Investment Analysis Report',
    html: `
      <h1>Property Investment Analysis</h1>
      <div style="background-color:#f0f9ff; padding:20px; border-radius:10px;">
        <pre style="white-space:pre-wrap; font-family:monospace;">${analysisResult}</pre>
      </div>
      <p>This report was generated by our real estate investment analysis system.</p>
    `
  };

  try {
    const info = await transporter.sendMail(mailOptions);
    console.log(`üìß Email sent to: ${recipientEmail}`);
    return info;
  } catch (error) {
    console.error('‚ùå Email sending failed:', error);
    throw error;
  }
}

// Analyze property data with DeepSeek API
function analyzeWithDeepSeek(propertyData, recipientEmail) {
  const ANALYSIS_PROMPT = `
Eres experto en an√°lisis de rentabilidades financieras para operaciones de activos inmobiliarios. Quiero que en base a la informaci√≥n adjunta aqu√≠ y la informaci√≥n que adjunte en formato json:

‚Ä¢‚Å†  ‚Å†Ubicaci√≥n exacta (Calle, numero, c√≥digo postal, portal, piso, puerta)
‚Ä¢‚Å†  ‚Å†Dimensiones (m2)
‚Ä¢‚Å†  ‚Å†Distribuci√≥n de la vivienda actual (si se tiene plano, adjuntar)
‚Ä¢‚Å†  ‚Å†Distribuci√≥n de la vivienda despu√©s de la reforma (si se tiene plano, adjuntar)
‚Ä¢‚Å†  ‚Å†Condiciones iniciales de compra por parte del propietario
‚Ä¢‚Å†  ‚Å†Pago de arras (en %)
‚Ä¢‚Å†  ‚Å†Carencia necesaria hasta terminar la reforma (al final de la carencia se pagar√≠a el restante que falta sobre las arras)
‚Ä¢‚Å†  ‚Å†Cantidad de equity a aportar en la compra
‚Ä¢‚Å†  ‚Å†Cantidad de pr√©stamo y condiciones del pr√©stamo
‚Ä¢‚Å†  ‚Å†Estado actual del inmueble (fotos, videos...)
‚Ä¢‚Å†  ‚Å†Precio de reforma estimada (si se conoce)
‚Ä¢‚Å†  ‚Å†Nota simple actualizada
‚Ä¢‚Å†  ‚Å†Etiqueta energ√©tica
‚Ä¢‚Å†  ‚Å†ITE del edificio
‚Ä¢‚Å†  ‚Å†3 √∫ltimas¬†actas¬†de¬†juntas


Tienes que ser capaz de analizar, valorar y emitir un informe de rentabilidad de cada operaci√≥n en la modalidad de Compra-reforma-venta (Contando con 800‚Ç¨-1000‚Ç¨/m2 de reforma estimada) o Compra-Reforma-Cambio de uso a tur√≠stico-Alquiler tur√≠stico (Analizando el documento de los ADRs adjunto) con el fin de evaluar r√°pidamente cu√°l ser√≠a el precio de compra ideal analizando el precio medio de venta de la zona a trav√©s de idealista.

En la modalidad de Compra-Reforma-Cambio de uso a tur√≠stico-Alquiler tur√≠stico tienes que ser capaz de analizar cu√°ntas unidades de al menos 35m2 podr√≠an salir y en base a ese n√∫mero calcular la rentabilidad en base a los ADRs aportados.

Puedes extraer informaci√≥n de idealista para conocer el precio por m2 de compra y alquiler de cada piso propuesto para evaluar su posible rentabilidad.

Para el c√°lculo de las plusval√≠as, ten en cuenta este enlace: https://sede.agenciatributaria.gob.es/Sede/ayuda/manuales-videos-folletos/manuales-practicos/manual-tributacion-no-residentes/capitulo-03-tributacion-rentas-comunes-nr/ganancias-patrimoniales/ganancias-patrimoniales-derivadas-venta-inmuebles.html

Este es el mapa de pisos tur√≠sticos en Madrid: https://www-2.munimadrid.es/IDEAM_WBGEOPORTAL/visor_ide.iam?ArcGIS=https://sigma.madrid.es/hosted/rest/services/VIVIENDA/VIVIENDAS_TURISTICAS/MapServer

Al finalizar el an√°lisis de rentabilidad quiero que propongas el precio de contraoferta que cumpla con una rentabilidad de al menos un 20% en compra-reforma-venta aportando un resumen como este:

‚Ä¢‚Å†  ‚Å†Tipo de operaci√≥n: CRV
‚Ä¢‚Å†  ‚Å†Ubicaci√≥n: Ciudad, distrito y barrio
‚Ä¢‚Å†  ‚Å†Precio de salida: Precio (Precio/m2)
‚Ä¢‚Å†  ‚Å†ITP y fiscalidad a pagar:
‚Ä¢‚Å†  ‚Å†Honorarios Black Rocket: (Calc√∫lalos en base al documento "Propuesta Hestia - BR" adjunto)
‚Ä¢‚Å†  ‚Å†Coste de reforma + amueblado + imprevistos (800‚Ç¨-1000‚Ç¨/m2 de reforma)
‚Ä¢‚Å†  ‚Å†Propuesta de precio de compra (analizando el precio medio del m2 de la zona en esta https://www.idealista.com/sala-de-prensa/informes-precio-vivienda/alquiler/madrid-comunidad/madrid-provincia/madrid/): Precio (Precio/m2)
‚Ä¢‚Å†  ‚Å†Ingresos mensuales previstos (si es CRA o R2R)
‚Ä¢‚Å†  ‚Å†Rentabilidad neta anual (%)
‚Ä¢‚Å†  ‚Å†ROE: (%)
‚Ä¢‚Å†  ‚Å†Yield:

A√±ade al an√°lisis una posible operaci√≥n de:

‚Ä¢‚Å†  ‚Å†Arras del 10-15%
‚Ä¢‚Å†  ‚Å†8 meses hasta escrituraci√≥n
‚Ä¢‚Å†  ‚Å†Reforma y reconversi√≥n a piso tur√≠stico durante el proceso desde el pago de arras hasta la escrituraci√≥n
‚Ä¢‚Å†  ‚Å†Cesi√≥n de arras y venta de inmueble con valor a√±adido.

Tambi√©n quiero que a√±adas un resumen al final con esta estructura para poder reenviar cada operaci√≥n a Hestia Viable Capital que nos contrata:

1.‚Å† ‚Å†Tipo de operaci√≥n: CRV
2.‚Å† ‚Å†Tipo de activo: (Edificio, local o piso)
3.‚Å† ‚Å†Ciudad y distrito o barrio
4.‚Å† ‚Å†Precio de salida
5.‚Å† ‚Å†Arras estimadas
6.‚Å† ‚Å†Inversi√≥n total (Arras + reforma y mobiliario + cambio de uso tur√≠stico + ITP + Honorarios BR)
5.‚Å† ‚Å†ADR de la zona
6.‚Å† ‚Å†Precio de venta estimado
7.‚Å† ‚Å†ROE


Datos de la propiedad:
${JSON.stringify(propertyData, null, 2)}

Calcula:
- Precio de compra ideal
- Inversi√≥n total estimada
- ROI para ambas modalidades
- Recomendaci√≥n de estrategia
  `;

  const options = {
    hostname: 'api.deepseek.com',
    path: '/v1/chat/completions',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
    }
  };

  const req = https.request(options, async (deepseekRes) => {
    console.log("hello world!!")
    console.log('api key deepseek: ', DEEPSEEK_API_KEY);
    let data = '';
    deepseekRes.on('data', (chunk) => data += chunk);
    
    deepseekRes.on('end', () => {
      try {
        const response = JSON.parse(data);
        console.log("deepseek response: ",response);
        
        if (response.choices && response.choices.length > 0) {
          const analysis = response.choices[0].message.content;
          console.log('‚úÖ Received analysis from DeepSeek');
          
          // Send analysis via email
          sendAnalysisEmail(recipientEmail, analysis)
          .then(() => console.log('üì© Analysis report emailed successfully'))
          .catch(err => console.error('‚ùå Failed to email analysis:', err));
        } else {
          throw new Error('Invalid response from DeepSeek API');
        }
      } catch (err) {
        console.error('‚ùå DeepSeek response parsing failed on :', err);
      }
    });
  });

  req.on('error', (err) => {
    console.error('‚ùå DeepSeek API request failed:', err);
  });

  req.write(JSON.stringify({
    model: "deepseek-chat",
    messages: [
      { role: "system", content: "Eres un experto en an√°lisis de inversiones inmobiliarias especializado en reformas y conversi√≥n a alojamientos tur√≠sticos." },
      { role: "user", content: ANALYSIS_PROMPT }
    ],
    temperature: 0.3,
    max_tokens: 2000
  }));

  req.end();
}

// Fetch property details from Idealista API
function fetchPropertyDetails(propertyId, recipientEmail) {
  const apiKey = getNextApiKey();
  
  const options = {
    method: 'GET',
    hostname: 'idealista7.p.rapidapi.com',
    path: `/propertydetails?propertyId=${propertyId}&location=es&language=en`,
    headers: {
      'x-rapidapi-key': apiKey,
      'x-rapidapi-host': 'idealista7.p.rapidapi.com'
    }
  };

  const req = https.request(options, (apiRes) => {
    let data = '';
    
    apiRes.on('data', (chunk) => data += chunk);
    
    apiRes.on('end', () => {
      console.log(`‚úÖ Used API key: ${apiKey}`);
      
      try {
        const propertyData = JSON.parse(data);
        console.log(`üîç Fetched property detail (${propertyId})`);
        
        // Send to DeepSeek for analysis
        analyzeWithDeepSeek(propertyData, recipientEmail);
      } catch (err) {
        console.error('‚ùå JSON parsing failed:', err);
      }
    });
  });

  req.on('error', (err) => {
    console.error(`‚ùå Idealista API Error with key ${apiKey}:`, err.message);
  });

  req.end();
}

// Create HTTP server
const server = http.createServer((req, res) => {
  const { pathname } = url.parse(req.url, true);
  
  if (req.method === 'POST' && pathname === API_ENDPOINT) {
    let body = '';
    
    req.on('data', chunk => body += chunk);
    
    req.on('end', () => {
      try {
        const payload = JSON.parse(body);
        
        // Validate request format
        if (!payload || typeof payload.emailBody !== 'string' || !payload.recipientEmail) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify({ 
            error: 'Invalid request format',
            message: 'Missing emailBody or recipientEmail'
          }));
        }
        
        // Extract property ID
        const regex = /(?<=https:\/\/www\.idealista\.com\/inmueble\/)\d+/;
        const match = payload.emailBody.match(regex);
        
        if (!match) {
          res.writeHead(400, { 'Content-Type': 'application/json' });
          return res.end(JSON.stringify({ 
            error: 'Property ID not found',
            message: 'No valid Idealista URL found in email body'
          }));
        }
        
        const propertyId = match[0];
        console.log(`üîç Extracted property ID: ${propertyId}`);
        
        // Start processing and respond immediately
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
          status: 'processing',
          message: 'Analysis started. Results will be sent to your email.',
          propertyId
        }));
        
        // Fetch property details and start analysis pipeline
        fetchPropertyDetails(propertyId, payload.recipientEmail);
        
      } catch (err) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
          error: 'Invalid JSON format',
          message: err.message
        }));
      }
    });
  } else {
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ 
      error: 'Not found',
      message: 'Only POST requests to /extract are supported'
    }));
  }
});

// Start the server
server.listen(PORT, () => {
  console.log(`üöÄ Server running at http://localhost:${PORT}`);
});